Project Notes. Alpine test.
Goal: Load hamburger menu with partials.

Files:
        alpine.html
        headerAlpine.html
        >>> menuAlpine.html / combine with header.
        partialLoader.html
        assets/js/menuOverlay.js // belt-suspenders...

        <!-- Old (remove this): -->
        <!-- <div include-html="/assets/partials/menuAlpine.html"></div> -->

        <!-- Keep this: -->
        <div include-html="/assets/partials/headerAlpine.html"></div>



CHALLENGE. Load mobile menu "with" partials. DOM needs to reload after loading partials.

Note: Do not nest partials. Do not include partial in a partial.


/test/alpine.html

      This guarantees:
      	1.	Your HTML partial (menuAlpine.html) is in the DOM
      	2.	Then Alpine is loaded and initializes
      	3.	Alpine binds correctly to the freshly injected markup

      <!-- Your HTML partial (menuAlpine.html) is in the DOM -->
          <script src="/assets/js/partialLoader.js"></script>

          <!-- Instead of defer-loading Alpine, do this inline -->
          <script>
            // Wait until partials are injected, then load Alpine manually
            injectPartials().then(() => {
              const alpineScript = document.createElement('script');
              alpineScript.src = 'https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js';
              alpineScript.defer = true;
              document.body.appendChild(alpineScript);
            });
          </script>

        //* this too *//
          async function injectPartials(selector = '[include-html]') {
            const nodes = document.querySelectorAll(selector);

            await Promise.all([...nodes].map(async node => {
              const file = node.getAttribute('include-html');
              if (!file) return;

              try {
                const response = await fetch(file);
                const html = await response.text();
                const temp = document.createElement('div');
                temp.innerHTML = html;
                node.replaceWith(...temp.childNodes);
              } catch (err) {
                console.error(`❌ Failed to load partial: ${file}`, err);
              }
            }));

            console.log('✅ Partials injected');
            return Promise.resolve();
          }


060925: Accordion was resolved. When I went to incorporate into initLoader.js, conflict. Site not showing again. Line 12 error again: const version = `?v=${Date.now()}`;

00/alpine/index2.html :: working like a charm.
caution when changing initLoader.js

header.html // temporary fix.
  { href: '/00/support/', label: 'Support' },
  { href: '/00/alpine/index2.html/', label: 'FAQs' },
  { href: '/00/contact/', label: 'Contact' },

061025
00/alpine/index2.html :: FAQs
00/alpine/index2-contact.html
00/alpine/index2-hm.html
00/alpine/index2-support.html
00/alpine/index2-thanks.html >>> different responses
00/alpine/index2-404.html


<!-- colors in tailwind.config.js -->
    brandDark: '#1d2834',
    brandSky: '#0f172a',
    stormSky: '#374151',
    warmRed: '#F54029',
    highlight: '#FF5500',
    neutralText: '#636363'

    <!-- Tertiary Image -->
  <!--  <img src="https://s3.us-west-1.amazonaws.com/fogday.ai/jan-huber-FuChqSzeCAc-unsplash.jpg"
     alt="Urban aerial view by Jan Huber on Unsplash"
     class="w-full h-auto"
     loading="lazy" />
<p class="text-xs text-gray-600 text-center mt-2">
  Source: Jan Huber, Unsplash
</p><br> -->



HR
<hr class="w-48 h-1 mx-auto my-4 bg-gray-100 border-0 rounded-sm md:my-10 dark:bg-gray-700">

<hr class="w-96 h-1 mx-auto my-4 bg-gray-100 border-0 rounded-sm md:my-10 dark:bg-gray-700">
<hr class="w-64 h-px my-8 bg-gray-200 border-0 dark:bg-gray-700"> // thin line 


<div class="inline-flex items-center justify-center w-full">
    <hr class="w-64 h-px my-8 bg-gray-200 border-0 dark:bg-gray-700">
    <span class="absolute px-3 font-medium text-gray-900 -translate-x-1/2 bg-white left-1/2 dark:text-white dark:bg-gray-900">or</span>
</div>
\
